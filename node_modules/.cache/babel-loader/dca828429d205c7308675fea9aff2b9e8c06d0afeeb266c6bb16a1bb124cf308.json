{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-09311dc2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"binary-converter\"\n};\nconst _hoisted_2 = {\n  class: \"section\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"result\"\n};\nconst _hoisted_4 = {\n  class: \"section\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"result\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.inputText = $event),\n    placeholder: \"Enter text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.inputText]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.convertToBinary && $options.convertToBinary(...args))\n  }, \"Convert to Binary\"), $data.binaryResult ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.copyToClipboard($data.binaryResult))\n  }, \"Copy\"), _createTextVNode(\" Binary: \" + _toDisplayString($data.binaryResult), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.binaryInput = $event),\n    placeholder: \"Enter binary\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.binaryInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.convertToText && $options.convertToText(...args))\n  }, \"Convert to Text\"), $data.textResult ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.copyToClipboard($data.textResult))\n  }, \"Copy\"), _createTextVNode(\" Text: \" + _toDisplayString($data.textResult), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","inputText","$event","placeholder","onClick","_cache","args","$options","convertToBinary","binaryResult","_hoisted_3","_ctx","copyToClipboard","_toDisplayString","_hoisted_4","binaryInput","convertToText","textResult","_hoisted_5"],"sources":["/Users/scottgrivner/Desktop/vue-binary_converter/src/components/BinaryConverter.vue"],"sourcesContent":["<template>\n    <div class=\"binary-converter\">\n      <div class=\"section\">\n        <textarea v-model=\"inputText\" placeholder=\"Enter text\"></textarea>\n        <button @click=\"convertToBinary\">Convert to Binary</button>\n        <div v-if=\"binaryResult\" class=\"result\">\n          <button @click=\"copyToClipboard(binaryResult)\">Copy</button>\n          Binary: {{ binaryResult }}\n        </div>\n      </div>\n      <div class=\"section\">\n        <textarea v-model=\"binaryInput\" placeholder=\"Enter binary\"></textarea>\n        <button @click=\"convertToText\">Convert to Text</button>\n        <div v-if=\"textResult\" class=\"result\">\n          <button @click=\"copyToClipboard(textResult)\">Copy</button>\n          Text: {{ textResult }}\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        inputText: '',\n        binaryInput: '',\n        binaryResult: '',\n        textResult: '',\n      };\n    },\n    methods: {\n      convertToBinary() {\n        const binary = this.inputText\n          .split('')\n          .map(char => char.charCodeAt(0).toString(2))\n          .join(' ');\n        this.binaryResult = binary;\n      },\n      convertToText() {\n        const binaryArray = this.binaryInput.split(' ');\n        const text = binaryArray\n          .map(bin => String.fromCharCode(parseInt(bin, 2)))\n          .join('');\n        this.textResult = text;\n      },\n    },\n  };\n  </script>\n  \n<style lang=\"less\" scoped>\n@import './BinaryConverter.less';\n</style>"],"mappings":";;;EACSA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAS;;;EAGOA,KAAK,EAAC;;;EAK5BA,KAAK,EAAC;AAAS;;;EAGKA,KAAK,EAAC;;;uBAZjCC,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBJC,mBAAA,CAOM,OAPNC,UAOM,G,gBANJD,mBAAA,CAAkE;+DAA/CE,KAAA,CAAAC,SAAS,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAAvBH,KAAA,CAAAC,SAAS,E,GAC5BH,mBAAA,CAA2D;IAAlDM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,mBAAiB,GACvCN,KAAA,CAAAS,YAAY,I,cAAvBb,mBAAA,CAGM,OAHNc,UAGM,GAFJZ,mBAAA,CAA4D;IAAnDM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAH,MAAA,IAAES,IAAA,CAAAC,eAAe,CAACZ,KAAA,CAAAS,YAAY;KAAG,MAAI,G,iBAAS,WACpD,GAAAI,gBAAA,CAAGb,KAAA,CAAAS,YAAY,iB,0CAG3BX,mBAAA,CAOM,OAPNgB,UAOM,G,gBANJhB,mBAAA,CAAsE;+DAAnDE,KAAA,CAAAe,WAAW,GAAAb,MAAA;IAAEC,WAAW,EAAC;iDAAzBH,KAAA,CAAAe,WAAW,E,GAC9BjB,mBAAA,CAAuD;IAA9CM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAS,aAAA,IAAAT,QAAA,CAAAS,aAAA,IAAAV,IAAA,CAAa;KAAE,iBAAe,GACnCN,KAAA,CAAAiB,UAAU,I,cAArBrB,mBAAA,CAGM,OAHNsB,UAGM,GAFJpB,mBAAA,CAA0D;IAAjDM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAH,MAAA,IAAES,IAAA,CAAAC,eAAe,CAACZ,KAAA,CAAAiB,UAAU;KAAG,MAAI,G,iBAAS,SACpD,GAAAJ,gBAAA,CAAGb,KAAA,CAAAiB,UAAU,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}