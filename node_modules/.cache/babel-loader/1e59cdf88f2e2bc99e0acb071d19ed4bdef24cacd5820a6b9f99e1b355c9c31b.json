{"ast":null,"code":"export default {\n  data() {\n    return {\n      inputText: '',\n      binaryInput: '',\n      binaryResult: '',\n      textResult: ''\n    };\n  },\n  methods: {\n    convertToBinary() {\n      const binary = this.inputText.split('').map(char => char.charCodeAt(0).toString(2)).join(' ');\n      this.binaryResult = binary;\n    },\n    convertToText() {\n      const binaryArray = this.binaryInput.split(' ');\n      const text = binaryArray.map(bin => String.fromCharCode(parseInt(bin, 2))).join('');\n      this.textResult = text;\n    }\n  }\n};","map":{"version":3,"names":["data","inputText","binaryInput","binaryResult","textResult","methods","convertToBinary","binary","split","map","char","charCodeAt","toString","join","convertToText","binaryArray","text","bin","String","fromCharCode","parseInt"],"sources":["/Users/scottgrivner/Desktop/vue-binary_converter/src/components/BinaryConverter.vue"],"sourcesContent":["<template>\n    <div class=\"binary-converter\">\n      <div class=\"section\">\n        <textarea v-model=\"inputText\" placeholder=\"Enter text\"></textarea>\n        <button @click=\"convertToBinary\">Convert to Binary</button>\n        <div v-if=\"binaryResult\" class=\"result\">Binary: {{ binaryResult }}</div>\n      </div>\n      <div class=\"section\">\n        <textarea v-model=\"binaryInput\" placeholder=\"Enter binary\"></textarea>\n        <button @click=\"convertToText\">Convert to Text</button>\n        <div v-if=\"textResult\" class=\"result\">Text: {{ textResult }}</div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        inputText: '',\n        binaryInput: '',\n        binaryResult: '',\n        textResult: '',\n      };\n    },\n    methods: {\n      convertToBinary() {\n        const binary = this.inputText\n          .split('')\n          .map(char => char.charCodeAt(0).toString(2))\n          .join(' ');\n        this.binaryResult = binary;\n      },\n      convertToText() {\n        const binaryArray = this.binaryInput.split(' ');\n        const text = binaryArray\n          .map(bin => String.fromCharCode(parseInt(bin, 2)))\n          .join('');\n        this.textResult = text;\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .binary-converter {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 20px;\n  }\n  \n  .section {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 10px;\n  \n    textarea {\n      width: 250px;\n      height: 100px;\n      padding: 5px;\n      border: 1px solid #ccc;\n    }\n  \n    button {\n      margin-top: 5px;\n      padding: 5px 10px;\n      background-color: #007bff;\n      color: #fff;\n      border: none;\n      cursor: pointer;\n  \n      &:hover {\n        background-color: #0056b3;\n      }\n    }\n  }\n  \n  .result {\n    margin-top: 10px;\n  }\n  </style>\n  "],"mappings":"AAgBE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAAA,EAAG;MAChB,MAAMC,MAAK,GAAI,IAAI,CAACN,SAAQ,CACzBO,KAAK,CAAC,EAAE,EACRC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,EAC1CC,IAAI,CAAC,GAAG,CAAC;MACZ,IAAI,CAACV,YAAW,GAAII,MAAM;IAC5B,CAAC;IACDO,aAAaA,CAAA,EAAG;MACd,MAAMC,WAAU,GAAI,IAAI,CAACb,WAAW,CAACM,KAAK,CAAC,GAAG,CAAC;MAC/C,MAAMQ,IAAG,GAAID,WAAU,CACpBN,GAAG,CAACQ,GAAE,IAAKC,MAAM,CAACC,YAAY,CAACC,QAAQ,CAACH,GAAG,EAAE,CAAC,CAAC,CAAC,EAChDJ,IAAI,CAAC,EAAE,CAAC;MACX,IAAI,CAACT,UAAS,GAAIY,IAAI;IACxB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}