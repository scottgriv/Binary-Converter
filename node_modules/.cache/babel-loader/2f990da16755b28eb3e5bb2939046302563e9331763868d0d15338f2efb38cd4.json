{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-09311dc2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"binary-converter\"\n};\nconst _hoisted_2 = {\n  class: \"section\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"result\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"copy-message\"\n};\nconst _hoisted_5 = {\n  class: \"section\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"result\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"copy-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.inputText = $event),\n    placeholder: \"Enter text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.inputText]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.convertToBinary && $options.convertToBinary(...args))\n  }, \"Convert to Binary\"), $data.binaryResult ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createTextVNode(\" Binary: \" + _toDisplayString($data.binaryResult) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.copyBinaryToClipboard($data.binaryResult))\n  }, \"Copy\"), $data.binaryCopied ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"Binary Copied to Clipboard\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.binaryInput = $event),\n    placeholder: \"Enter binary\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.binaryInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.convertToText && $options.convertToText(...args))\n  }, \"Convert to Text\"), $data.textResult ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createTextVNode(\" Text: \" + _toDisplayString($data.textResult) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => $options.copyTextToClipboard($data.textResult))\n  }, \"Copy\"), $data.textCopied ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, \"Text Copied to Clipboard\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"button\", {\n    class: \"clear-button\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.clearFields && $options.clearFields(...args))\n  }, \"Reset\")]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","inputText","$event","placeholder","onClick","_cache","args","$options","convertToBinary","binaryResult","_hoisted_3","_toDisplayString","copyBinaryToClipboard","binaryCopied","_hoisted_4","_hoisted_5","binaryInput","convertToText","textResult","_hoisted_6","copyTextToClipboard","textCopied","_hoisted_7","clearFields"],"sources":["/Users/scottgrivner/Desktop/vue-binary_converter/src/components/BinaryConverter.vue"],"sourcesContent":["<template>\n    <div class=\"binary-converter\">\n      <div class=\"section\">\n        <textarea v-model=\"inputText\" placeholder=\"Enter text\"></textarea>\n        <button @click=\"convertToBinary\">Convert to Binary</button>\n        <div v-if=\"binaryResult\" class=\"result\">\n          Binary: {{ binaryResult }}\n          <button @click=\"copyBinaryToClipboard(binaryResult)\">Copy</button>\n          <div v-if=\"binaryCopied\" class=\"copy-message\">Binary Copied to Clipboard</div>\n        </div>\n      </div>\n      <div class=\"section\">\n        <textarea v-model=\"binaryInput\" placeholder=\"Enter binary\"></textarea>\n        <button @click=\"convertToText\">Convert to Text</button>\n        <div v-if=\"textResult\" class=\"result\">\n          Text: {{ textResult }}\n          <button @click=\"copyTextToClipboard(textResult)\">Copy</button>\n          <div v-if=\"textCopied\" class=\"copy-message\">Text Copied to Clipboard</div>\n        </div>\n      </div>\n      <button class=\"clear-button\" @click=\"clearFields\">Reset</button>\n    </div>\n  </template>\n  \n  \n  <script>\n  export default {\n    data() {\n      return {\n        inputText: '',\n        binaryInput: '',\n        binaryResult: '',\n        textResult: '',\n        binaryCopied: false,\n        textCopied: false,\n      };\n    },\n    methods: {\n      convertToBinary() {\n        const binary = this.inputText\n          .split('')\n          .map(char => char.charCodeAt(0).toString(2))\n          .join(' ');\n        this.binaryResult = binary;\n      },\n      convertToText() {\n        const binaryArray = this.binaryInput.split(' ');\n        const text = binaryArray\n          .map(bin => String.fromCharCode(parseInt(bin, 2)))\n          .join('');\n        this.textResult = text;\n      },\n      copyBinaryToClipboard(text) {\n        this.copyToClipboard(text, 'binary');\n      },\n      copyTextToClipboard(text) {\n        this.copyToClipboard(text, 'text');\n      },\n      copyToClipboard(text, type) {\n        const textarea = document.createElement('textarea');\n        textarea.value = text;\n        document.body.appendChild(textarea);\n        textarea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textarea);\n        \n        if (type === 'binary') {\n          this.binaryCopied = true;\n          setTimeout(() => {\n            this.binaryCopied = false;\n          }, 2000);\n        } else if (type === 'text') {\n          this.textCopied = true;\n          setTimeout(() => {\n            this.textCopied = false;\n          }, 2000);\n        }\n      },\n      clearFields() {\n      this.inputText = '';\n      this.binaryInput = '';\n      this.binaryResult = '';\n      this.textResult = '';\n    },\n    },\n  };\n  </script>\n  \n  \n<style lang=\"less\" scoped>\n@import './BinaryConverter.less';\n</style>"],"mappings":";;;EACSA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAS;;;EAGOA,KAAK,EAAC;;;;EAGJA,KAAK,EAAC;;;EAG9BA,KAAK,EAAC;AAAS;;;EAGKA,KAAK,EAAC;;;;EAGJA,KAAK,EAAC;;;uBAhBnCC,mBAAA,CAoBM,OApBNC,UAoBM,GAnBJC,mBAAA,CAQM,OARNC,UAQM,G,gBAPJD,mBAAA,CAAkE;+DAA/CE,KAAA,CAAAC,SAAS,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAAvBH,KAAA,CAAAC,SAAS,E,GAC5BH,mBAAA,CAA2D;IAAlDM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,mBAAiB,GACvCN,KAAA,CAAAS,YAAY,I,cAAvBb,mBAAA,CAIM,OAJNc,UAIM,G,iBAJkC,WAC9B,GAAAC,gBAAA,CAAGX,KAAA,CAAAS,YAAY,IAAG,GAC1B,iBAAAX,mBAAA,CAAkE;IAAzDM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAH,MAAA,IAAEK,QAAA,CAAAK,qBAAqB,CAACZ,KAAA,CAAAS,YAAY;KAAG,MAAI,GAC9CT,KAAA,CAAAa,YAAY,I,cAAvBjB,mBAAA,CAA8E,OAA9EkB,UAA8E,EAAhC,4BAA0B,K,4EAG5EhB,mBAAA,CAQM,OARNiB,UAQM,G,gBAPJjB,mBAAA,CAAsE;+DAAnDE,KAAA,CAAAgB,WAAW,GAAAd,MAAA;IAAEC,WAAW,EAAC;iDAAzBH,KAAA,CAAAgB,WAAW,E,GAC9BlB,mBAAA,CAAuD;IAA9CM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAU,aAAA,IAAAV,QAAA,CAAAU,aAAA,IAAAX,IAAA,CAAa;KAAE,iBAAe,GACnCN,KAAA,CAAAkB,UAAU,I,cAArBtB,mBAAA,CAIM,OAJNuB,UAIM,G,iBAJgC,SAC9B,GAAAR,gBAAA,CAAGX,KAAA,CAAAkB,UAAU,IAAG,GACtB,iBAAApB,mBAAA,CAA8D;IAArDM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAH,MAAA,IAAEK,QAAA,CAAAa,mBAAmB,CAACpB,KAAA,CAAAkB,UAAU;KAAG,MAAI,GAC1ClB,KAAA,CAAAqB,UAAU,I,cAArBzB,mBAAA,CAA0E,OAA1E0B,UAA0E,EAA9B,0BAAwB,K,4EAGxExB,mBAAA,CAAgE;IAAxDH,KAAK,EAAC,cAAc;IAAES,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAgB,WAAA,IAAAhB,QAAA,CAAAgB,WAAA,IAAAjB,IAAA,CAAW;KAAE,OAAK,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}