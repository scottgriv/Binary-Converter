{"ast":null,"code":"export default {\n  data() {\n    return {\n      inputText: '',\n      binaryInput: '',\n      binaryResult: '',\n      textResult: '',\n      binaryCopied: false,\n      textCopied: false\n    };\n  },\n  computed: {\n    binaryBits() {\n      return this.binaryResult.replace(/\\s+/g, '').length;\n    },\n    binaryBytes() {\n      return Math.ceil(this.binaryBits / 8);\n    },\n    binaryKilobytes() {\n      return (this.binaryBytes / 1024).toFixed(2);\n    },\n    binaryMegabytes() {\n      return (this.binaryKilobytes / 1024).toFixed(2);\n    },\n    textCharacters() {\n      return this.textResult.length;\n    },\n    textBytes() {\n      return new Blob([this.textResult]).size;\n    },\n    textKilobytes() {\n      return (this.textBytes / 1024).toFixed(2);\n    },\n    textMegabytes() {\n      return (this.textKilobytes / 1024).toFixed(2);\n    }\n  },\n  methods: {\n    convertToBinary() {\n      const binary = this.inputText.split('').map(char => char.charCodeAt(0).toString(2)).join(' ');\n      this.binaryResult = binary;\n    },\n    convertToText() {\n      const binaryArray = this.binaryInput.split(' ');\n      const text = binaryArray.map(bin => String.fromCharCode(parseInt(bin, 2))).join('');\n      this.textResult = text;\n    },\n    copyBinaryToClipboard(text) {\n      this.copyToClipboard(text, 'binary');\n    },\n    copyTextToClipboard(text) {\n      this.copyToClipboard(text, 'text');\n    },\n    copyToClipboard(text, type) {\n      const textarea = document.createElement('textarea');\n      textarea.value = text;\n      document.body.appendChild(textarea);\n      textarea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n      if (type === 'binary') {\n        this.binaryCopied = true;\n        setTimeout(() => {\n          this.binaryCopied = false;\n        }, 2000);\n      } else if (type === 'text') {\n        this.textCopied = true;\n        setTimeout(() => {\n          this.textCopied = false;\n        }, 2000);\n      }\n    },\n    clearFields() {\n      this.inputText = '';\n      this.binaryInput = '';\n      this.binaryResult = '';\n      this.textResult = '';\n    }\n  }\n};","map":{"version":3,"names":["data","inputText","binaryInput","binaryResult","textResult","binaryCopied","textCopied","computed","binaryBits","replace","length","binaryBytes","Math","ceil","binaryKilobytes","toFixed","binaryMegabytes","textCharacters","textBytes","Blob","size","textKilobytes","textMegabytes","methods","convertToBinary","binary","split","map","char","charCodeAt","toString","join","convertToText","binaryArray","text","bin","String","fromCharCode","parseInt","copyBinaryToClipboard","copyToClipboard","copyTextToClipboard","type","textarea","document","createElement","value","body","appendChild","select","execCommand","removeChild","setTimeout","clearFields"],"sources":["/Users/scottgrivner/Desktop/vue-binary_converter/src/components/BinaryConverter.vue"],"sourcesContent":["<template>\n    <div class=\"binary-converter\">\n      <div class=\"section\">\n        <textarea v-model=\"inputText\" placeholder=\"Enter text\"></textarea>\n        <button @click=\"convertToBinary\">Convert to Binary</button>\n        <div v-if=\"binaryResult\" class=\"result\">\n          <button @click=\"copyBinaryToClipboard(binaryResult)\">Copy</button>\n          Binary: {{ binaryResult }}\n          <div v-if=\"binaryCopied\" class=\"copy-message\">Binary Copied to Clipboard</div>\n          <div>Bits: {{ binaryBits }}</div>\n          <div>Bytes: {{ binaryBytes }}</div>\n          <div>Kilobytes: {{ binaryKilobytes }}</div>\n          <div>Megabytes: {{ binaryMegabytes }}</div>\n        </div>\n      </div>\n      <div class=\"section\">\n        <textarea v-model=\"binaryInput\" placeholder=\"Enter binary\"></textarea>\n        <button @click=\"convertToText\">Convert to Text</button>\n        <div v-if=\"textResult\" class=\"result\">\n          <button @click=\"copyTextToClipboard(textResult)\">Copy</button>\n          Text: {{ textResult }}\n          <div v-if=\"textCopied\" class=\"copy-message\">Text Copied to Clipboard</div>\n          <div>Characters: {{ textCharacters }}</div>\n          <div>Bytes: {{ textBytes }}</div>\n          <div>Kilobytes: {{ textKilobytes }}</div>\n          <div>Megabytes: {{ textMegabytes }}</div>\n        </div>\n      </div>\n      <button class=\"clear-button\" @click=\"clearFields\">Reset</button>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        inputText: '',\n        binaryInput: '',\n        binaryResult: '',\n        textResult: '',\n        binaryCopied: false,\n        textCopied: false,\n      };\n    },\n    computed: {\n      binaryBits() {\n        return this.binaryResult.replace(/\\s+/g, '').length;\n      },\n      binaryBytes() {\n        return Math.ceil(this.binaryBits / 8);\n      },\n      binaryKilobytes() {\n        return (this.binaryBytes / 1024).toFixed(2);\n      },\n      binaryMegabytes() {\n        return (this.binaryKilobytes / 1024).toFixed(2);\n      },\n      textCharacters() {\n        return this.textResult.length;\n      },\n      textBytes() {\n        return new Blob([this.textResult]).size;\n      },\n      textKilobytes() {\n        return (this.textBytes / 1024).toFixed(2);\n      },\n      textMegabytes() {\n        return (this.textKilobytes / 1024).toFixed(2);\n      },\n    },\n    methods: {\n      convertToBinary() {\n        const binary = this.inputText\n          .split('')\n          .map(char => char.charCodeAt(0).toString(2))\n          .join(' ');\n        this.binaryResult = binary;\n      },\n      convertToText() {\n        const binaryArray = this.binaryInput.split(' ');\n        const text = binaryArray\n          .map(bin => String.fromCharCode(parseInt(bin, 2)))\n          .join('');\n        this.textResult = text;\n      },\n      copyBinaryToClipboard(text) {\n        this.copyToClipboard(text, 'binary');\n      },\n      copyTextToClipboard(text) {\n        this.copyToClipboard(text, 'text');\n      },\n      copyToClipboard(text, type) {\n        const textarea = document.createElement('textarea');\n        textarea.value = text;\n        document.body.appendChild(textarea);\n        textarea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textarea);\n  \n        if (type === 'binary') {\n          this.binaryCopied = true;\n          setTimeout(() => {\n            this.binaryCopied = false;\n          }, 2000);\n        } else if (type === 'text') {\n          this.textCopied = true;\n          setTimeout(() => {\n            this.textCopied = false;\n          }, 2000);\n        }\n      },\n      clearFields() {\n        this.inputText = '';\n        this.binaryInput = '';\n        this.binaryResult = '';\n        this.textResult = '';\n      },\n    },\n  };\n  </script>\n  \n\n<style lang=\"less\" scoped>\n@import './BinaryConverter.less';\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}