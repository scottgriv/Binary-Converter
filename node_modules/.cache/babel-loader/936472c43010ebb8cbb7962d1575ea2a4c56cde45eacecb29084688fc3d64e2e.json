{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-09311dc2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"result\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"result\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.inputText = $event),\n    placeholder: \"Enter text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.inputText]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.convertToBinary && $options.convertToBinary(...args))\n  }, \"Convert to Binary\"), $data.binaryResult ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"Binary: \" + _toDisplayString($data.binaryResult), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.binaryInput = $event),\n    placeholder: \"Enter binary\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.binaryInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.convertToText && $options.convertToText(...args))\n  }, \"Convert to Text\"), $data.textResult ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"Text: \" + _toDisplayString($data.textResult), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","$data","inputText","$event","placeholder","onClick","_cache","args","$options","convertToBinary","binaryResult","_hoisted_2","_toDisplayString","binaryInput","convertToText","textResult","_hoisted_3"],"sources":["/Users/scottgrivner/Desktop/vue-binary_converter/src/components/BinaryConverter.vue"],"sourcesContent":["<template>\n    <div class=\"hello\">\n      <textarea v-model=\"inputText\" placeholder=\"Enter text\"></textarea>\n      <button @click=\"convertToBinary\">Convert to Binary</button>\n      <div v-if=\"binaryResult\" class=\"result\">Binary: {{ binaryResult }}</div>\n  \n      <textarea v-model=\"binaryInput\" placeholder=\"Enter binary\"></textarea>\n      <button @click=\"convertToText\">Convert to Text</button>\n      <div v-if=\"textResult\" class=\"result\">Text: {{ textResult }}</div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        inputText: '',\n        binaryInput: '',\n        binaryResult: '',\n        textResult: '',\n      };\n    },\n    methods: {\n      convertToBinary() {\n        const binary = this.inputText\n          .split('')\n          .map(char => char.charCodeAt(0).toString(2))\n          .join(' ');\n        this.binaryResult = binary;\n      },\n      convertToText() {\n        const binaryArray = this.binaryInput.split(' ');\n        const text = binaryArray\n          .map(bin => String.fromCharCode(parseInt(bin, 2)))\n          .join('');\n        this.textResult = text;\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .result {\n    margin-top: 10px;\n  }\n  </style>\n  "],"mappings":";;;EACSA,KAAK,EAAC;AAAO;;;EAGSA,KAAK,EAAC;;;;EAIRA,KAAK,EAAC;;;uBAP/BC,mBAAA,CAQM,OARNC,UAQM,G,gBAPJC,mBAAA,CAAkE;+DAA/CC,KAAA,CAAAC,SAAS,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAAvBH,KAAA,CAAAC,SAAS,E,GAC5BF,mBAAA,CAA2D;IAAlDK,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,mBAAiB,GACvCN,KAAA,CAAAS,YAAY,I,cAAvBZ,mBAAA,CAAwE,OAAxEa,UAAwE,EAAhC,UAAQ,GAAAC,gBAAA,CAAGX,KAAA,CAAAS,YAAY,oB,mDAE/DV,mBAAA,CAAsE;+DAAnDC,KAAA,CAAAY,WAAW,GAAAV,MAAA;IAAEC,WAAW,EAAC;iDAAzBH,KAAA,CAAAY,WAAW,E,GAC9Bb,mBAAA,CAAuD;IAA9CK,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAM,aAAA,IAAAN,QAAA,CAAAM,aAAA,IAAAP,IAAA,CAAa;KAAE,iBAAe,GACnCN,KAAA,CAAAc,UAAU,I,cAArBjB,mBAAA,CAAkE,OAAlEkB,UAAkE,EAA5B,QAAM,GAAAJ,gBAAA,CAAGX,KAAA,CAAAc,UAAU,oB"},"metadata":{},"sourceType":"module","externalDependencies":[]}